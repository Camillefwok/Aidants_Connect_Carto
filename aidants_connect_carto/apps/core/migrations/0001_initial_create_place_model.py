# Generated by Django 3.0.5 on 2020-04-22 15:22

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="BetaGouv",
                        max_length=300,
                        verbose_name="Le nom du lieu",
                    ),
                ),
                (
                    "supporting_structure_name",
                    models.CharField(
                        blank=True,
                        help_text="Services du Premier Ministre",
                        max_length=300,
                        verbose_name="Le nom de la structure porteuse du lieu",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="L'incubateur de Services Numériques de l'État",
                        verbose_name="Une description du lieu",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("centre social", "Centre social"),
                            (
                                "securite sociale",
                                "Organisme de sécurité sociale (CAF, CPAM, CARSAT, MSA...)",
                            ),
                            ("tiers lieu", "Tiers-lieu & coworking, FabLab"),
                            ("association", "Association"),
                            ("maison quartier", "Maison de quartier"),
                            (
                                "pimms",
                                "Point Information Médiation Multi Services (PIMMS)",
                            ),
                            ("msap", "Maison de Service au Public (MSAP)"),
                            ("bibliotheque", "Bibliothèque - Médiathèque"),
                            ("formation", "Organisme de formations"),
                            ("pole emploi", "Pôle Emploi"),
                            ("commune", "Commune (Ville, CCAS, Centre Culturel...)"),
                            ("intercommunalite", "Intercommunalité (EPCI)"),
                            (
                                "administration",
                                "Administration - Collectivité territoriale",
                            ),
                            ("departement", "Département (UTPAS, MDS, MDSI, UTAS...)"),
                            ("prefecture", "Préfecture, Sous-Préfecture"),
                            ("autre", "Autre, Inconnu"),
                        ],
                        default="autre",
                        help_text="Administration",
                        max_length=32,
                        verbose_name="La typologie du lieu",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("prive", "Privé"),
                            ("public-prive", "Public / Privé"),
                            ("autre", "Autre, Inconnu"),
                        ],
                        default="autre",
                        help_text="Public",
                        max_length=32,
                        verbose_name="Le statut du lieu",
                    ),
                ),
                (
                    "legal_entity_type",
                    models.CharField(
                        choices=[
                            ("association", "Association"),
                            ("collectivite", "Collectivité locale ou territoriale"),
                            (
                                "cae",
                                "Coopérative d'Activités et d'Entrepreneur·es (CAE)",
                            ),
                            (
                                "epci",
                                "Établissement public de coopération intercommunale (EPCI)",
                            ),
                            (
                                "sasu",
                                "Société par actions simplifiée unipersonnelle (SASU)",
                            ),
                            ("scic", "société coopérative d’intérêt collectif (SCIC)"),
                            ("scop", "Société coopérative et participative (SCOP)"),
                            ("spl", "Société publique locale (SPL)"),
                            ("autre", "Autre, Inconnu"),
                        ],
                        default="autre",
                        max_length=32,
                        verbose_name="La nature juridique du lieu",
                    ),
                ),
                (
                    "address_raw",
                    models.CharField(
                        help_text="20 Avenue de Ségur 75007 Paris",
                        max_length=300,
                        verbose_name="L'adresse complète",
                    ),
                ),
                (
                    "address_housenumber",
                    models.CharField(
                        blank=True,
                        help_text="20",
                        max_length=15,
                        verbose_name="Le numéro avec indice de répétition éventuel (bis, ter, A, B)",
                    ),
                ),
                (
                    "address_street",
                    models.CharField(
                        blank=True,
                        help_text="Avenue de Ségur",
                        max_length=150,
                        verbose_name="Le nom de la rue",
                    ),
                ),
                (
                    "address_postcode",
                    models.CharField(
                        blank=True,
                        help_text="75007",
                        max_length=5,
                        verbose_name="Le code postal",
                    ),
                ),
                (
                    "address_citycode",
                    models.CharField(
                        blank=True,
                        help_text="75107",
                        max_length=5,
                        verbose_name="Le code INSEE de la commune",
                    ),
                ),
                (
                    "address_city",
                    models.CharField(
                        blank=True,
                        help_text="Paris",
                        max_length=150,
                        verbose_name="Le nom de la commune",
                    ),
                ),
                (
                    "address_departement_code",
                    models.CharField(
                        blank=True,
                        help_text="75",
                        max_length=3,
                        verbose_name="Le numéro de département",
                    ),
                ),
                (
                    "address_departement_name",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Ain", "Ain (01)"),
                            ("Aisne", "Aisne (02)"),
                            ("Allier", "Allier (03)"),
                            ("Alpes-de-Haute-Provence", "Alpes-de-Haute-Provence (04)"),
                            ("Hautes-Alpes", "Hautes-Alpes (05)"),
                            ("Alpes-Maritimes", "Alpes-Maritimes (06)"),
                            ("Ardèche", "Ardèche (07)"),
                            ("Ardennes", "Ardennes (08)"),
                            ("Ariège", "Ariège (09)"),
                            ("Aube", "Aube (10)"),
                            ("Aude", "Aude (11)"),
                            ("Aveyron", "Aveyron (12)"),
                            ("Bouches-du-Rhône", "Bouches-du-Rhône (13)"),
                            ("Calvados", "Calvados (14)"),
                            ("Cantal", "Cantal (15)"),
                            ("Charente", "Charente (16)"),
                            ("Charente-Maritime", "Charente-Maritime (17)"),
                            ("Cher", "Cher (18)"),
                            ("Corrèze", "Corrèze (19)"),
                            ("Corse-du-Sud", "Corse-du-Sud (2A)"),
                            ("Haute-Corse", "Haute-Corse (2B)"),
                            ("Côte-d'Or", "Côte-d'Or (21)"),
                            ("Côtes-d'Armor", "Côtes-d'Armor (22)"),
                            ("Creuse", "Creuse (23)"),
                            ("Dordogne", "Dordogne (24)"),
                            ("Doubs", "Doubs (25)"),
                            ("Drôme", "Drôme (26)"),
                            ("Eure", "Eure (27)"),
                            ("Eure-et-Loir", "Eure-et-Loir (28)"),
                            ("Finistère", "Finistère (29)"),
                            ("Gard", "Gard (30)"),
                            ("Haute-Garonne", "Haute-Garonne (31)"),
                            ("Gers", "Gers (32)"),
                            ("Gironde", "Gironde (33)"),
                            ("Hérault", "Hérault (34)"),
                            ("Ille-et-Vilaine", "Ille-et-Vilaine (35)"),
                            ("Indre", "Indre (36)"),
                            ("Indre-et-Loire", "Indre-et-Loire (37)"),
                            ("Isère", "Isère (38)"),
                            ("Jura", "Jura (39)"),
                            ("Landes", "Landes (40)"),
                            ("Loir-et-Cher", "Loir-et-Cher (41)"),
                            ("Loire", "Loire (42)"),
                            ("Haute-Loire", "Haute-Loire (43)"),
                            ("Loire-Atlantique", "Loire-Atlantique (44)"),
                            ("Loiret", "Loiret (45)"),
                            ("Lot", "Lot (46)"),
                            ("Lot-et-Garonne", "Lot-et-Garonne (47)"),
                            ("Lozère", "Lozère (48)"),
                            ("Maine-et-Loire", "Maine-et-Loire (49)"),
                            ("Manche", "Manche (50)"),
                            ("Marne", "Marne (51)"),
                            ("Haute-Marne", "Haute-Marne (52)"),
                            ("Mayenne", "Mayenne (53)"),
                            ("Meurthe-et-Moselle", "Meurthe-et-Moselle (54)"),
                            ("Meuse", "Meuse (55)"),
                            ("Morbihan", "Morbihan (56)"),
                            ("Moselle", "Moselle (57)"),
                            ("Nièvre", "Nièvre (58)"),
                            ("Nord", "Nord (59)"),
                            ("Oise", "Oise (60)"),
                            ("Orne", "Orne (61)"),
                            ("Pas-de-Calais", "Pas-de-Calais (62)"),
                            ("Puy-de-Dôme", "Puy-de-Dôme (63)"),
                            ("Pyrénées-Atlantiques", "Pyrénées-Atlantiques (64)"),
                            ("Hautes-Pyrénées", "Hautes-Pyrénées (65)"),
                            ("Pyrénées-Orientales", "Pyrénées-Orientales (66)"),
                            ("Bas-Rhin", "Bas-Rhin (67)"),
                            ("Haut-Rhin", "Haut-Rhin (68)"),
                            ("Rhône", "Rhône (69)"),
                            ("Haute-Saône", "Haute-Saône (70)"),
                            ("Saône-et-Loire", "Saône-et-Loire (71)"),
                            ("Sarthe", "Sarthe (72)"),
                            ("Savoie", "Savoie (73)"),
                            ("Haute-Savoie", "Haute-Savoie (74)"),
                            ("Paris", "Paris (75)"),
                            ("Seine-Maritime", "Seine-Maritime (76)"),
                            ("Seine-et-Marne", "Seine-et-Marne (77)"),
                            ("Yvelines", "Yvelines (78)"),
                            ("Deux-Sèvres", "Deux-Sèvres (79)"),
                            ("Somme", "Somme (80)"),
                            ("Tarn", "Tarn (81)"),
                            ("Tarn-et-Garonne", "Tarn-et-Garonne (82)"),
                            ("Var", "Var (83)"),
                            ("Vaucluse", "Vaucluse (84)"),
                            ("Vendée", "Vendée (85)"),
                            ("Vienne", "Vienne (86)"),
                            ("Haute-Vienne", "Haute-Vienne (87)"),
                            ("Vosges", "Vosges (88)"),
                            ("Yonne", "Yonne (89)"),
                            ("Territoire de Belfort", "Territoire de Belfort (90)"),
                            ("Essonne", "Essonne (91)"),
                            ("Hauts-de-Seine", "Hauts-de-Seine (92)"),
                            ("Seine-Saint-Denis", "Seine-Saint-Denis (93)"),
                            ("Val-de-Marne", "Val-de-Marne (94)"),
                            ("Val-d'Oise", "Val-d'Oise (95)"),
                            ("Guadeloupe", "Guadeloupe (971)"),
                            ("Martinique", "Martinique (972)"),
                            ("Guyane", "Guyane (973)"),
                            ("La Réunion", "La Réunion (974)"),
                            ("Mayotte", "Mayotte (976)"),
                        ],
                        help_text="Paris",
                        max_length=150,
                        verbose_name="Le nom du département",
                    ),
                ),
                (
                    "address_region_name",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Auvergne-Rhône-Alpes", "Auvergne-Rhône-Alpes"),
                            ("Bourgogne-Franche-Comté", "Bourgogne-Franche-Comté"),
                            ("Bretagne", "Bretagne"),
                            ("Centre-Val de Loire", "Centre-Val de Loire"),
                            ("Corse", "Corse"),
                            ("Grand Est", "Grand Est"),
                            ("Hauts-de-France", "Hauts-de-France"),
                            ("Île-de-France", "Île-de-France"),
                            ("Normandie", "Normandie"),
                            ("Nouvelle-Aquitaine", "Nouvelle-Aquitaine"),
                            ("Occitanie", "Occitanie"),
                            ("Pays de la Loire", "Pays de la Loire"),
                            (
                                "Provence-Alpes-Côte d'Azur",
                                "Provence-Alpes-Côte d'Azur",
                            ),
                            ("Guadeloupe", "Guadeloupe"),
                            ("Martinique", "Martinique"),
                            ("Guyane", "Guyane"),
                            ("La Réunion", "La Réunion"),
                            ("Mayotte", "Mayotte"),
                        ],
                        help_text="Île-de-France",
                        max_length=150,
                        verbose_name="Le nom de la région",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="48.850699",
                        null=True,
                        verbose_name="La latitude (coordonnée géographique)",
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="2.308628",
                        null=True,
                        verbose_name="La longitude (coordonnée géographique)",
                    ),
                ),
                (
                    "is_itinerant",
                    models.BooleanField(
                        default=False, verbose_name="Le lieu est-il itinérant ?"
                    ),
                ),
                (
                    "itinerant_details",
                    models.TextField(
                        blank=True, verbose_name="Le details des déplacements"
                    ),
                ),
                (
                    "is_online",
                    models.BooleanField(
                        default=False,
                        verbose_name="Le lieu est-il uniquement en ligne ?",
                    ),
                ),
                (
                    "contact_phone_raw",
                    models.CharField(
                        max_length=300, verbose_name="Le numéro de téléphone brut"
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="0123456789",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="le numéro de téléphone doit être au format 0123456789",
                                regex="^[0-9]{10}$",
                            )
                        ],
                        verbose_name="Le numéro de téléphone",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="exemple@email.fr",
                        max_length=150,
                        verbose_name="Le courriel",
                    ),
                ),
                (
                    "contact_website",
                    models.URLField(
                        blank=True,
                        help_text="https://beta.gouv.fr/",
                        max_length=300,
                        verbose_name="L'adresse du site internet",
                    ),
                ),
                (
                    "contact_facebook",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        verbose_name="L'adresse de la page Facebook",
                    ),
                ),
                (
                    "contact_twitter",
                    models.URLField(
                        blank=True,
                        help_text="https://twitter.com/betagouv",
                        max_length=300,
                        verbose_name="L'adresse de la page Twitter",
                    ),
                ),
                (
                    "contact_youtube",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        verbose_name="L'adresse de la page Youtube",
                    ),
                ),
                (
                    "opening_hours_raw",
                    models.TextField(
                        blank=True,
                        help_text="Du lundi au vendredi de 8h à 20h",
                        verbose_name="Les horaires d'ouverture",
                    ),
                ),
                (
                    "opening_hours_osm_format",
                    models.CharField(
                        blank=True,
                        help_text="Mo-Fr 8:00-20:00",
                        max_length=150,
                        verbose_name="Les horaires d'ouverture au format OpenStreetMap",
                    ),
                ),
                (
                    "has_equipment_wifi",
                    models.BooleanField(default=False, verbose_name="WiFi"),
                ),
                (
                    "has_equipment_computer",
                    models.BooleanField(default=False, verbose_name="Ordinateur"),
                ),
                (
                    "has_equipment_scanner",
                    models.BooleanField(default=False, verbose_name="Scanner"),
                ),
                (
                    "has_equipment_printer",
                    models.BooleanField(default=False, verbose_name="Imprimante"),
                ),
                (
                    "equipment_other",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        verbose_name="Autres équipements disponibles",
                    ),
                ),
                (
                    "has_accessibility_hi",
                    models.BooleanField(default=False, verbose_name="Handicap auditif"),
                ),
                (
                    "has_accessibility_mi",
                    models.BooleanField(default=False, verbose_name="Handicap moteur"),
                ),
                (
                    "has_accessibility_pi",
                    models.BooleanField(
                        default=False, verbose_name="Handicap intellectuel ou psychique"
                    ),
                ),
                (
                    "has_accessibility_vi",
                    models.BooleanField(default=False, verbose_name="Handicap visuel"),
                ),
                (
                    "languages",
                    models.CharField(
                        blank=True,
                        help_text="Français, Anglais, ...",
                        max_length=150,
                        verbose_name="Langues parlées",
                    ),
                ),
                (
                    "target_audience_raw",
                    models.TextField(blank=True, verbose_name="Le public cible"),
                ),
                (
                    "target_audience",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            blank=True,
                            choices=[
                                ("tout public", "Tout public"),
                                ("-25 ans", "-25 ans, Jeune"),
                                ("senior", "Sénior"),
                                ("demandeur emploi", "Demandeur d'emploi"),
                                ("famille", "Famille"),
                                ("allocataire", "Allocataires"),
                            ],
                            max_length=32,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Public cible",
                    ),
                ),
                (
                    "payment_methods",
                    models.CharField(
                        blank=True,
                        help_text="Espèces, Carte Bancaire, ...",
                        max_length=150,
                        verbose_name="Les moyens de paiement",
                    ),
                ),
                (
                    "additional_information",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        null=True,
                        verbose_name="Informations additionnelles stockées au format JSON",
                    ),
                ),
                (
                    "osm_node_id",
                    models.IntegerField(
                        blank=True,
                        help_text="5266052428",
                        null=True,
                        verbose_name="OpenStreetMap node id",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="La date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="La date de dernière modification"
                    ),
                ),
            ],
            options={"ordering": ["id"],},
        ),
    ]
